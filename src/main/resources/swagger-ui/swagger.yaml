openapi: 3.0.3
info:
  title: API de Gerenciamento de Usuários
  version: 1.0.0
  description: Aplicação que realiza o gerenciamento de usuários e restaurantes.

tags:
  - name: Cliente
    description: Endpoints para gerenciamento de clientes
  - name: Restaurante
    description: Endpoints para gerenciamento de restaurantes

paths:
  /clientes:
    get:
      tags:
        - Cliente
      summary: Consultar cliente por usuário
      description: Consultar um cliente previamente cadastrado pelo nome de usuário.
      operationId: BuscarCliente
      parameters:
        - name: usuario
          in: query
          required: true
          schema:
            type: string
          example: xpto
      responses:
        '200':
          description: Cliente encontrado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cliente'
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Cliente
      summary: Criar um novo cliente
      description: Criar um novo cliente, com dados pessoais.
      operationId: InserirCliente
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cliente'
      responses:
        '201':
          description: Usuário criado com sucesso
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Usuário ou documento já existente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /clientes/{usuario}:
    patch:
      tags:
        - Cliente
      summary: Atualizar dados do cliente
      description: Rota para atualizar os dados de um cliente previamente cadastrado.
      operationId: AtualizarCliente
      parameters:
        - name: usuario
          in: path
          required: true
          description: Nome de usuário do cliente
          schema:
            type: string
            example: usuario123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AtualizarClienteRequest'
      responses:
        '200':
          description: Dados do cliente atualizados com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cliente'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Senha antiga incorreta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Cliente
      summary: Remover cliente
      description: Remove um cliente previamente cadastrado com base no nome de usuário.
      operationId: DeletarCliente
      parameters:
        - name: usuario
          in: path
          required: true
          schema:
            type: string
          example: joaosilva123
      responses:
        '204':
          description: Cliente removido com sucesso
        '404':
          description: Cliente não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /restaurantes:
    get:
      tags:
        - Restaurante
      summary: Consultar restaurante por usuário
      description: Consultar um restaurante previamente cadastrado pelo nome de usuário.
      operationId: BuscarRestaurante
      parameters:
        - name: usuario
          in: query
          required: true
          schema:
            type: string
          example: xpto
      responses:
        '200':
          description: Restaurante encontrado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurante'
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Restaurante
      summary: Criar um novo restaurante
      description: Criar um novo restaurante, com dados pessoais.
      operationId: InserirRestaurante
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restaurante'
      responses:
        '201':
          description: Restaurante criado com sucesso
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Usuário ou documento já existente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /restaurantes/{usuario}:
    patch:
      tags:
        - Restaurante
      summary: Atualizar dados do restaurante
      description: Rota para atualizar os dados de um restaurante previamente cadastrado.
      operationId: AtualizarRestaurante
      parameters:
        - name: usuario
          in: path
          required: true
          description: Nome de usuário do restaurante
          schema:
            type: string
            example: restaurante123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AtualizarRestauranteRequest'
      responses:
        '200':
          description: Dados do restaurante atualizados com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurante'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Senha antiga incorreta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Restaurante
      summary: Remover restaurante
      description: Remove um restaurante previamente cadastrado com base no nome de usuário.
      operationId: DeletarRestaurante
      parameters:
        - name: usuario
          in: path
          required: true
          schema:
            type: string
          example: saborcaseiro
      responses:
        '204':
          description: Restaurante removido com sucesso
        '404':
          description: Restaurante não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    Cliente:
      type: object
      properties:
        nome:
          type: string
          example: João da Silva
        email:
          type: string
          format: email
          example: joao@email.com
        endereco:
          type: string
          example: Rua das Flores, 123
        telefone:
          type: string
          example: "+55 11 91234-5678"
        usuario:
          type: string
          example: joaosilva123
      required:
        - nome
        - email
        - endereco
        - telefone
        - usuario

    AtualizarClienteRequest:
      type: object
      properties:
        nome:
          type: string
          example: João da Silva
        email:
          type: string
          format: email
          example: joao@email.com
        endereco:
          type: string
          example: Rua das Flores, 123
        telefone:
          type: string
          example: "+55 11 91234-5678"
      required:
        - nome
        - email
        - endereco
        - telefone

    Restaurante:
      type: object
      properties:
        nome:
          type: string
          example: Restaurante Sabor Caseiro
        email:
          type: string
          format: email
          example: contato@saborcaseiro.com
        endereco:
          type: string
          example: Avenida Principal, 456
        telefone:
          type: string
          example: "+55 11 98765-4321"
        usuario:
          type: string
          example: saborcaseiro
        tipoCozinha:
          type: string
          example: Brasileira
        horarioFuncionamentoInicio:
          type: string
          format: time
          example: "09:00"
        horarioFuncionamentoFim:
          type: string
          format: time
          example: "22:00"
        donoRestaurante:
          type: boolean
          example: true
      required:
        - nome
        - email
        - endereco
        - telefone
        - usuario
        - tipoCozinha
        - horarioFuncionamentoInicio
        - horarioFuncionamentoFim
        - donoRestaurante

    AtualizarRestauranteRequest:
      type: object
      properties:
        nome:
          type: string
          example: Restaurante Sabor Caseiro
        email:
          type: string
          format: email
          example: contato@saborcaseiro.com
        endereco:
          type: string
          example: Avenida Principal, 456
        telefone:
          type: string
          example: "+55 11 98765-4321"
        tipoCozinha:
          type: string
          example: Brasileira
        horarioFuncionamentoInicio:
          type: string
          format: time
          example: "09:00"
        horarioFuncionamentoFim:
          type: string
          format: time
          example: "22:00"
        donoRestaurante:
          type: boolean
          example: true
      required:
        - nome
        - email
        - endereco
        - telefone
        - tipoCozinha
        - horarioFuncionamentoInicio
        - horarioFuncionamentoFim
        - donoRestaurante

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          example: "2025-05-14T15:42:00Z"
        status:
          type: integer
          example: 404
        error:
          type: string
          example: "Not Found"
        message:
          type: string
          example: "Usuário não encontrado"
        path:
          type: string
          example: "/ms-usuario/v1/usuario"